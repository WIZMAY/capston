/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.50
 * Generated at: 2021-06-01 08:40:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import DB.connection.DBConnection;
import java.util.ArrayList;

public final class survey_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("DB.connection.DBConnection");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>폴인사이트</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/survey.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<header>\r\n");
      out.write("\t\t<h1>폴인사이트</h1>\r\n");
      out.write("\t</header>\r\n");
      out.write("\t<form id=\"form\" method=\"get\" action=\"#\">\r\n");
      out.write("\t\t<div class=\"surveypaper-header\">\r\n");
      out.write("\t\t\t<div class=\"progress\">\r\n");
      out.write("\t\t\t\t<div id=\"progress-text\">\r\n");
      out.write("\t\t\t\t\t<div style=\"float: left;\">진행률</div>\r\n");
      out.write("\t\t\t\t\t<div style=\"float: right;\">60%</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div id=\"progress-behind\">\r\n");
      out.write("\t\t\t\t\t<div id=\"progress-front\"></div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class='questions' id='questions'></div>\r\n");
      out.write("\t\t<div class=\"surveypaper-footer\">\r\n");
      out.write("\t\t\t<button id=\"prev-btn\" type=\"submit\" value=\"submit\">이전</button>\r\n");
      out.write("\t\t\t<button id=\"next-btn\" type=\"submit\" value=\"submit\">다음</button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</form>\r\n");
      out.write("\r\n");
      out.write("\t<script>\r\n");
      out.write("\tfunction addQuestion(question_id) {\r\n");
      out.write("\t\tlet questions = document.getElementById('questions');\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tlet question = document.createElement('div');\r\n");
      out.write("\t\tquestion.className = \"question\";\r\n");
      out.write("\r\n");
      out.write("\t\tquestion.innerHTML = \"<table class='question_table' id='question_table\" + question_id + \"'></table>\"\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tquestions.appendChild(question);\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction addTitle(question_id, title){\r\n");
      out.write("\t\tlet table = document.getElementById(\"question_table\" + question_id);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\tlet rowlen = table.rows.length + 1;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t// var row = table.insertRow(); // IE와 Chrome 동작을 달리함.\r\n");
      out.write("\t\tlet row = table.insertRow(rowlen - 1); // HTML에서의 권장 표준 문법\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\tlet newcell = row.insertCell(0);\r\n");
      out.write("\t\tnewcell.innerHTML = title;\r\n");
      out.write("\t\tnewcell.className = \"title\";\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction addOption(question_id, contents, value, order){\r\n");
      out.write("\t\tlet table = document.getElementById(\"question_table\" + question_id);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\tlet rowlen = table.rows.length + 1;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t// var row = table.insertRow(); // IE와 Chrome 동작을 달리함.\r\n");
      out.write("\t\tlet row = table.insertRow(rowlen - 1); // HTML에서의 권장 표준 문법\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\tlet newcell = row.insertCell(0);\r\n");
      out.write("\t\tnewcell.innerHTML = \"<input type='radio' id='option\" + question_id + \"_\" + order + \"' name='option\" + question_id + \"' value = \" + value + \"></input>\" \r\n");
      out.write("\t\t+ \"<label for='option\" + question_id + \"_\" + order + \"'>\" + contents + \"</label>\";\r\n");
      out.write("\t\tnewcell.className = \"options\";\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction addTextArea(question_id){\r\n");
      out.write("\t\tlet table = document.getElementById(\"question_table\" + question_id);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tlet rowlen = table.rows.length + 1;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t// var row = table.insertRow(); // IE와 Chrome 동작을 달리함.\r\n");
      out.write("\t\tlet row = table.insertRow(rowlen - 1); // HTML에서의 권장 표준 문법\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\tlet newcell = row.insertCell(0);\r\n");
      out.write("\t\tnewcell.innerHTML = \"<textarea class='textarea' id='answer\" + question_id + \"'></textarea>\";\r\n");
      out.write("\t\tnewcell.className = \"textarea\";\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction addMatrixOption(question_id, contents){\r\n");
      out.write("\t\tlet table = document.getElementById(\"question_table\" + question_id);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tlet rowlen = table.rows.length + 1;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\tlet row;\r\n");
      out.write("\t\tif(rowlen < 3){\r\n");
      out.write("\t\t\t// var row = table.insertRow(); // IE와 Chrome 동작을 달리함.\r\n");
      out.write("\t\t\trow = table.insertRow(rowlen - 1); // HTML에서의 권장 표준 문법\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tlet newcell = row.insertCell(0);\r\n");
      out.write("\t\t\tnewcell.className = \"blank\";\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\trow = table.rows[1];\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\tlet newcell = row.insertCell(1);\r\n");
      out.write("\t\tnewcell.innerHTML = contents;\r\n");
      out.write("\t\tnewcell.className = \"option_title\";\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction addMatrixQuestion(question_id, title, num_of_option, order){\r\n");
      out.write("\t\tlet table = document.getElementById(\"question_table\" + question_id);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tlet rowlen = table.rows.length + 1;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t// var row = table.insertRow(); // IE와 Chrome 동작을 달리함.\r\n");
      out.write("\t\tlet row = table.insertRow(rowlen - 1); // HTML에서의 권장 표준 문법\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\tlet newcell = row.insertCell(0);\r\n");
      out.write("\t\tnewcell.innerHTML = title;\r\n");
      out.write("\t\tnewcell.className = \"inner_title\";\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfor(let i = 1; i <= num_of_option; i++){\r\n");
      out.write("\t\t\tnewcell = row.insertCell(i);\r\n");
      out.write("\t\t\tnewcell.innerHTML = \"<input type='radio' id='option' name='option\" + question_id + \"_\" + order +\"' value=''>\";\r\n");
      out.write("\t\t\tnewcell.className = \"matrix_options\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction setValue(question_id, col, cell ,value){\r\n");
      out.write("\t\tlet table = document.getElementById(\"question_table\" + question_id);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tlet opt = table.rows[col].cells[cell].querySelector(\"input\");\r\n");
      out.write("\t\t\r\n");
      out.write("\t\topt.value = value;\r\n");
      out.write("\t}\r\n");
      out.write("\t</script>\r\n");

int form_id = Integer.parseInt(request.getParameter("form_id"));

Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;

ArrayList<Integer> questions = new ArrayList<>();
ArrayList<Integer> options = new ArrayList<>();
int group = 0;

try {
	// 커넥션을 가져온다.
	conn = DBConnection.getConnection();

	// 자동 커밋을 false로 한다.
	conn.setAutoCommit(false);

	StringBuffer sql = new StringBuffer();
	sql.append("SELECT i.question_id FROM include i WHERE i.form_id = ?;");

	pstmt = conn.prepareStatement(sql.toString());
	pstmt.setInt(1, form_id);

	rs = pstmt.executeQuery();

	while (rs.next()) {
		questions.add(Integer.valueOf(rs.getInt(1))); // question_id
	}

	for (int i = 0; i < questions.size(); i++) {
		
      out.write("\r\n");
      out.write("\t\t\t<script>addQuestion(");
      out.print(questions.get(i));
      out.write(");</script>\r\n");
      out.write("\t\t");

		sql = new StringBuffer();
		sql.append("SELECT * FROM question q WHERE q.question_id = ?");

		pstmt = conn.prepareStatement(sql.toString());
		pstmt.setInt(1, questions.get(i));

		rs = pstmt.executeQuery();

		while (rs.next()) {
			String title = rs.getString("title");
			String type = rs.getString("type");

			
      out.write("\r\n");
      out.write("\t\t\t\t<script>addTitle(");
      out.print(questions.get(i));
      out.write(',');
      out.write(' ');
      out.write('\'');
      out.print(title);
      out.write("');</script>\r\n");
      out.write("\t\t\t");

			
			int order = 1;
			
			switch (type) {
			case "multiple" :
				group = rs.getInt("option_group_id");
		
				sql = new StringBuffer();
				sql.append("SELECT o.* FROM option o, option_grouping og WHERE og.option_group_id = ? AND og.option_id = o.option_id;");

				pstmt = conn.prepareStatement(sql.toString());
				pstmt.setInt(1, group);
	
				rs = pstmt.executeQuery();
				
				order = 1;
				
				while (rs.next()) {
					int value = rs.getInt(1);
					String contents = rs.getString("contents");
					
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<script>addOption(");
      out.print(questions.get(i));
      out.write(',');
      out.write(' ');
      out.write('\'');
      out.print(contents);
      out.write('\'');
      out.write(',');
      out.write(' ');
      out.print(value);
      out.write(' ');
      out.write(',');
      out.write(' ');
      out.print(order++);
      out.write(");</script>\r\n");
      out.write("\t\t\t\t\t");

				}
				break;
			
			case "shortanswer" :
				
      out.write("\r\n");
      out.write("\t\t\t\t<script>addTextArea(");
      out.print(questions.get(i));
      out.write(");</script>\r\n");
      out.write("\t\t\t\t");

				break;
			
			case "matrix" :
				group = rs.getInt("option_group_id");
				
				sql = new StringBuffer();
				sql.append("SELECT o.* FROM option o, option_grouping og WHERE og.option_group_id = ? AND og.option_id = o.option_id ORDER BY og.option_num DESC;");
	
				pstmt = conn.prepareStatement(sql.toString());
				pstmt.setInt(1, group);
	
				rs = pstmt.executeQuery();
				
				// 옵션 불러오기
				while (rs.next()) {
					int value = rs.getInt(1);
					String contents = rs.getString("contents");
					
					options.add(Integer.valueOf(value));
					
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<script>addMatrixOption(");
      out.print(questions.get(i));
      out.write(',');
      out.write(' ');
      out.write('\'');
      out.print(contents);
      out.write("');</script>\r\n");
      out.write("\t\t\t\t\t");

				}
				
				sql = new StringBuffer();
				sql.append("SELECT q.title FROM question q, matrix_rel m WHERE m.main_question = ? AND m.sub_question = q.question_id;");
	
				pstmt = conn.prepareStatement(sql.toString());
				pstmt.setInt(1, questions.get(i));
	
				rs = pstmt.executeQuery();
				
				order = 1;
				
				// 질문 불러오기
				while (rs.next()) {
					String inner_title = rs.getString("title");
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<script>addMatrixQuestion(");
      out.print(questions.get(i));
      out.write(',');
      out.write(' ');
      out.write('\'');
      out.print(inner_title);
      out.write('\'');
      out.write(',');
      out.write(' ');
      out.print(options.size());
      out.write(',');
      out.print(order++);
      out.write(");</script>\r\n");
      out.write("\t\t\t\t\t");

				}
				
				for(int j = 2; j < order + 1; j++){
					for(int k = 1; k <= options.size(); k++){
						
      out.write("\r\n");
      out.write("\t\t\t\t\t\t<script>setValue(");
      out.print(questions.get(i));
      out.write(',');
      out.write(' ');
      out.print(j);
      out.write(',');
      out.write(' ');
      out.print(k);
      out.write(',');
      out.write(' ');
      out.print(options.get(options.size() - k));
      out.write(");</script>\r\n");
      out.write("\t\t\t\t\t\t");

					}
				}
				
				
				options.clear();
				break;
				}
			}
		}
	}
	 finally {
	// Connection, PreparedStatement를 닫는다.
	try {
		if (rs != null) {
	rs.close();
	rs = null;
		}
		if (pstmt != null) {
	pstmt.close();
	pstmt = null;
		}
		if (conn != null) {
	conn.close();
	conn = null;
		}
	} catch (Exception e) {
		throw new RuntimeException(e.getMessage());
	}
} // end try~catch

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
