/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.50
 * Generated at: 2021-05-25 06:15:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import DB.connection.DBConnection;
import model.question.*;
import model.form.*;
import model.encrypt.*;

public final class formPro_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("model.form");
    _jspx_imports_packages.add("model.encrypt");
    _jspx_imports_packages.add("model.question");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("DB.connection.DBConnection");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<title>form</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t");

	//불러올 내용
	request.setCharacterEncoding("utf-8");
	
	QuestionDAO qdao = QuestionDAO.getInstance();
	Question question = null;
	
	FormDAO fdao = FormDAO.getInstance();
	int form_id = Integer.parseInt(request.getParameter("form"));
	out.println(form_id);

	final String QUESTION_TYPE = "type";
	final String OPTION_COUNT = "option_count";
	final String OPTION = "option";
	final String QUESTION_TITLE = "question_title"; //matrix에서만 사용
	final String QUESTION_COUNT = "question_count"; //matrix에서만 사용
	final String MAIN_TITLE = "main_question_title";
	final String MULTIPLE_RES = "multi_res";
	final String NECESSARY = "necessary";
	final String SHUFFLE = "shuffle";

	int num_of_idx = Integer.parseInt(request.getParameter("num_of_index"));

	String title = null;
	String type = null;
	String q_title = null;
	int question_c = 0;
	String[] questions = null;
	int option_c = 0;
	String[] options = null;
	int mul_res = 0;
	int necessary = 0;
	int shuffle = 0;
	int option_group_id = 0;
	int question_id = 0;
	int sub_question_id = 0;

	for (int i = 0; i < num_of_idx; i++) {
		mul_res = 0;
		necessary = 0;
		shuffle = 0;
		
		int index = Integer.parseInt(request.getParameter("index" + i));

		title = request.getParameter(MAIN_TITLE + index);
		type = request.getParameter(QUESTION_TYPE + index);

		switch (type) {
		case "multiple": //객관식일때
			option_c = Integer.parseInt(request.getParameter(OPTION_COUNT + index));

			options = new String[option_c];
			for (int j = 0; j < options.length; j++) {
		options[j] = request.getParameter(OPTION + index + "_" + j);
			}

			mul_res = request.getParameter(MULTIPLE_RES + index)==null?0:1;
			necessary = request.getParameter(NECESSARY + index)==null?0:1;
			shuffle = request.getParameter(SHUFFLE + index)==null?0:1;
			
			break;
		case "shortanswer": //주관식일때
			necessary = request.getParameter(NECESSARY + index)==null?0:1;

			break;
		case "matrix": //행렬형일때
			question_c = Integer.parseInt(request.getParameter(QUESTION_COUNT + index));
			questions = new String[question_c];
			for (int k = 0; k < questions.length; k++) {
		questions[k] = request.getParameter(QUESTION_TITLE + index + "_" + k);
			}

			option_c = Integer.parseInt(request.getParameter(OPTION_COUNT + index));
			options = new String[option_c];
			for (int j = 0; j < options.length; j++) {
		options[j] = request.getParameter(OPTION + index + "_" + j);
			}

			mul_res = request.getParameter(MULTIPLE_RES + index)==null?0:1;
			necessary = request.getParameter(NECESSARY + index)==null?0:1;
			shuffle = request.getParameter(SHUFFLE + index)==null?0:1;
			break;
		}
		
		switch (type) {
		case "multiple": //객관식일때
			option_group_id = qdao.insertOptionGroup(option_c);

			for (int j = 0; j < options.length; j++) {
				int option_id = qdao.insertOption(options[j]);
				
				qdao.optionGrouping(option_id, option_group_id, j+1);
			}
			
			question = new Question(title, type, mul_res, necessary, shuffle);
			
			question_id = qdao.insertQuestion(question, option_group_id);
			
			break;
		case "shortanswer": //주관식일때
			question = new Question(title, type, mul_res, necessary, shuffle);
			
			question_id = qdao.insertQuestion(question);
			
			break;
		case "matrix": //행렬형일때
			option_group_id = qdao.insertOptionGroup(option_c);
		
			for (int j = 0; j< options.length; j++) {
				int option_id = qdao.insertOption(options[j]);
				
				qdao.optionGrouping(option_id, option_group_id, j+1);
			}
			
			question = new Question(title, type, mul_res, necessary, shuffle);
			
			question_id = qdao.insertQuestion(question, option_group_id);
			
			for (int j = 0; j < questions.length; j++) {
				question = new Question(questions[j], type, mul_res, necessary, shuffle);
				
				sub_question_id = qdao.insertQuestion(question);
				
				qdao.matrix(question_id, sub_question_id, j+1);
			}
			
			break;
		}
		
		fdao.include(form_id, question_id, i+1);
	}
	
	fdao.alterNumber(form_id, num_of_idx);
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
